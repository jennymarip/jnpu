1756797221878:run
1756797229124:test
1756798405800:exit
1756799538041:test
1756800601012:exit
1756800919885:run
1756802085989:exit
1756802142320:run
1756802182707:test
1756802293669:projects
1756802333682:exit
1756802346028:projects
1756802348620:exit
1756802357000:sun
1756802359871:run
1756802369441:test
1756802400545:exit
1756977324662:run
1756977335331:test
1756977564868:exit
1756977576437:run
1756977589484:test
1756985898176:exit
1756985906161:run
1756985913297:test
1756986193107:eixt
1756986195313:exit
1756989475255:"testOnly PassthroughTest"
1756989485532:testOnly PassthroughTest
1756989507525:testOnly HelloTest
1756989655317:exit
1757074651771:run
1757074694083:exit
1757074706954:run
1757075336021:exit
1757075834661:run
1757075842939:test
1757075899467:exit
1757313827804:run
1757313928729:test
1757314010664:exit
1757319800942:run
1757319806549:test
1757320272104:testOnly SPUTest
1757320367415:testOnlyHelloTest
1757320370640:testOnly HelloTest
1757320386294:"testOnly HelloTest"
1757320404728:sbt "testOnly SPUTest"
1757320414285:exit
1757321136267:testOnly PassthroughTest
1757321144370:testOnly vegeta.PassthroughTest
1757321160492:testOnly vegeta.SPUTest
1757321215034:testOnly vegeta.PassthroughTest -- -DwriteVcd=1
1757321405850:testOnly vegeta.HelloTest -- -DwriteVcd=1
1757321570223:exit
1757323334552:run
1757323346271:test
1757323483218:testOnly vegeta.SPUTest
1757323491343:exit
1757324691229:run
1757324701418:test
1757325098879:testOnly SPUTest
1757325360746:testOnly vegeta.SPUTest
1757325834839:run
1757325839770:testOnly vegeta.SPUTest
1757326251565:run
1757326258210:test
1757326303534:testOnly vegeta.SPUTest -- -DwriteVcd=1
1757326357174:exit
1757379518448:testOnly vegeta.SPUTest
1757379657894:exit
1757381064889:testOnly vegeta.SPUTest
1757381573547:[error] /home/zhanglei/00/work1/src/test/scala/SPUTest.scala:20:21: reassignment to val\n[error]           blk0.data = Seq(10, 20, 30, 40)\n[error]                     ^\n[error] /home/zhanglei/00/work1/src/test/scala/SPUTest.scala:21:21: reassignment to val\n[error]           blk1.data = Seq(12, 22, 32, 42)\n[error]                     ^\n[error] two errors found\n[error] (Test / compileIncremental) Compilation failed\n[error] Total time: 4 s, completed Sep 9, 2025, 9:24:29 AM
1757381584959:exit
1757381601835:testOnly vegeta.SPUTest
1757383331910:exit
1757385367819:testOnly vegeta.SPUTest
1757385393723:exit
1757386797584:run
1757387007474:testOnly vegeta.SPUTest
1757387131251:run
1757387225105:testOnly vegeta.SPUTest
1757388874808:exit
1757388948708:run
1757388953930:testOnly vegeta.SPUTest
1757388965626:exit
1757389355352:run
1757389543643:testOnly vegeta.SPUTest
1757389844328:exit
1757403363096:run
1757403845627:exit
1757405079154:run
1757405093169:test
1757405113567:exit
1757406499688:test
1757407546798:run
1757407559556:test
1757407772220:exit
1757409129618:run
1757409168745:test
1757409176051:exit
1757419225426:run
1757419239544:test
1757419247053:exit
1757465874307:run
1757465896343:test
1757465910528:exit
1757577311650:run
1757577332992:test
1757579491335:exit
1757583398488:run
1757583611503:test
1757583629543:exit
1757592567092:run
1757592592304:test
1757592788905:exit
1757641744761:run
1757642243105:test
1757644543243:run
1757644582438:test
1757644677789:run
1757644694124:test
1757645320496:run
1757645705919:exit
1757679168708:run
1757679181836:test
1757679194273:exit
1757679419315:test
1757679444676:exit
1757901921519:run
1757901938239:test
1757903031676:testOnly vegeta.vageta_saTest
1757903054681:test
1757903212195:testOnly vegeta.SPUTest
1757903235283:testOnly vegeta.vegeta_saTest
1757926465716:exit
1757927950701:testOnly vegeta.vegeta_saTest
1757939852569:exit
1757940020477:testOnly vegeta.vegeta_saTest
1757940041859:exit
1757987617676:testOnly vegeta.vegeta_saTest
1757989082850:class vegeta_saTest extends AnyFlatSpec with ChiselScalatestTester{\n    behavior of "vegeta_sa 1:4"\n    it should "pass" in {\n        test(new vegeta_sa) { u =>\n            val rand = new Random\n            u.clock.setTimeout(0)\n            u.io.weight_load_en.poke(true.B)\n            // 初始化了一个稀疏矩阵(COO)(A)\n            val weight_in = Seq.fill(N_rows)(Seq.fill(N_cols)(Seq.fill(broadcast_factor)(Seq.fill(reduction_factor)(rand.nextInt(10)))))\n            val index_in = Seq.fill(N_rows)(Seq.fill(N_cols)(Seq.fill(broadcast_factor)(Seq.fill(reduction_factor)(rand.nextInt(blk_size)))))\n            println("脉动阵列数据布局(data:index):")\n            for(i <- 0 until N_rows){\n                for(j <- 0 until reduction_factor){\n                    print(weight_in(i)(0)(0)(j) + ":" + index_in(i)(0)(0)(j)+" ")\n                }\n                println()\n            }\n            // 初始化dense矩阵(B)的一列,结构化稀疏测试(1:4,2:4,4:4通用)\n            val input_in = Seq.fill(N_rows)(Seq.fill(reduction_factor)(Seq.fill(blk_size)(rand.nextInt(10))))\n            println("第一列数据块:")\n            for(i <- 0 until N_rows){\n                for(j <- 0 until reduction_factor){\n                    print(" "+i+"."+j+" : ")\n                    for(k <- 0 until blk_size)\n                        print(input_in(i)(j)(k)+" ")\n                }\n                println()\n            }\n            // load weight\n            for(t <- 0 until N_rows){\n                for(i <- 0 until N_cols){\n                    for(j <- 0 until broadcast_factor){\n                        for(k <- 0 until reduction_factor){\n                            if(u.io.weight_load_en.peekBoolean()){\n                                u.io.weight_in(i)(j)(k).poke(weight_in(N_rows-t-1)(i)(j)(k))\n                                u.io.index_in(i)(j)(k).poke(index_in(N_rows-t-1)(i)(j)(k))\n                            }\n                        }\n                    }\n                }\n                u.clock.step(1)\n            }\n            u.io.weight_load_en.poke(false.B)\n            println("load weight complete!")\n            var cycleCount = 0\n            // 测试计算过程\n            for(i <- 0 until N_rows){\n                for(j <- 0 until reduction_factor){\n                    for(k <- 0 until blk_size)\n                        u.io.left_in(i)(j)(k).poke(input_in(i)(j)(k))\n                }\n                u.clock.step(1)\n                cycleCount = cycleCount + 1\n                println("第"+i+"轮:")\n                for(j <- 0 until N_rows){\n                    for(k <- 0 until reduction_factor)\n                        print(u.io.SPE_output(j)(0)(0)(k).peekInt()+" ")\n                    println()\n                }\n            }\n            var res = 0\n            for(i <- 0 until reduction_factor)\n                res = res + u.io.output(0)(0)(i).peekInt().toInt\n            var true_res = 0\n            for(i <- 0 until N_rows){\n                for(j <- 0 until reduction_factor)\n                    true_res = true_res + weight_in(i)(0)(0)(j)*input_in(i)(j)(index_in(i)(0)(0)(j))\n            }\n            println(true_res)\n            println("计算所需周期数:"+cycleCount)\n            assert(res==true_res)\n            println("compute complete!")\n\n            println("vegeta_sa SUCCESS!!")\n        }\n    }\n}
1757989113740:exitclass vegeta_saTest extends AnyFlatSpec with ChiselScalatestTester{\n    behavior of "vegeta_sa 1:4"\n    it should "pass" in {\n        test(new vegeta_sa) { u =>\n            val rand = new Random\n            u.clock.setTimeout(0)\n            u.io.weight_load_en.poke(true.B)\n            // 初始化了一个稀疏矩阵(COO)(A)\n            val weight_in = Seq.fill(N_rows)(Seq.fill(N_cols)(Seq.fill(broadcast_factor)(Seq.fill(reduction_factor)(rand.nextInt(10)))))\n            val index_in = Seq.fill(N_rows)(Seq.fill(N_cols)(Seq.fill(broadcast_factor)(Seq.fill(reduction_factor)(rand.nextInt(blk_size)))))\n            println("脉动阵列数据布局(data:index):")\n            for(i <- 0 until N_rows){\n                for(j <- 0 until reduction_factor){\n                    print(weight_in(i)(0)(0)(j) + ":" + index_in(i)(0)(0)(j)+" ")\n                }\n                println()\n            }\n            // 初始化dense矩阵(B)的一列,结构化稀疏测试(1:4,2:4,4:4通用)\n            val input_in = Seq.fill(N_rows)(Seq.fill(reduction_factor)(Seq.fill(blk_size)(rand.nextInt(10))))\n            println("第一列数据块:")\n            for(i <- 0 until N_rows){\n                for(j <- 0 until reduction_factor){\n                    print(" "+i+"."+j+" : ")\n                    for(k <- 0 until blk_size)\n                        print(input_in(i)(j)(k)+" ")\n                }\n                println()\n            }\n            // load weight\n            for(t <- 0 until N_rows){\n                for(i <- 0 until N_cols){\n                    for(j <- 0 until broadcast_factor){\n                        for(k <- 0 until reduction_factor){\n                            if(u.io.weight_load_en.peekBoolean()){\n                                u.io.weight_in(i)(j)(k).poke(weight_in(N_rows-t-1)(i)(j)(k))\n                                u.io.index_in(i)(j)(k).poke(index_in(N_rows-t-1)(i)(j)(k))\n                            }\n                        }\n                    }\n                }\n                u.clock.step(1)\n            }\n            u.io.weight_load_en.poke(false.B)\n            println("load weight complete!")\n            var cycleCount = 0\n            // 测试计算过程\n            for(i <- 0 until N_rows){\n                for(j <- 0 until reduction_factor){\n                    for(k <- 0 until blk_size)\n                        u.io.left_in(i)(j)(k).poke(input_in(i)(j)(k))\n                }\n                u.clock.step(1)\n                cycleCount = cycleCount + 1\n                println("第"+i+"轮:")\n                for(j <- 0 until N_rows){\n                    for(k <- 0 until reduction_factor)\n                        print(u.io.SPE_output(j)(0)(0)(k).peekInt()+" ")\n                    println()\n                }\n            }\n            var res = 0\n            for(i <- 0 until reduction_factor)\n                res = res + u.io.output(0)(0)(i).peekInt().toInt\n            var true_res = 0\n            for(i <- 0 until N_rows){\n                for(j <- 0 until reduction_factor)\n                    true_res = true_res + weight_in(i)(0)(0)(j)*input_in(i)(j)(index_in(i)(0)(0)(j))\n            }\n            println(true_res)\n            println("计算所需周期数:"+cycleCount)\n            assert(res==true_res)\n            println("compute complete!")\n\n            println("vegeta_sa SUCCESS!!")\n        }\n    }\n}
1757989115023:exit
1757989776838:testOnly vegeta.vegeta_saTest
1757992877039:exit
1757993489438:testOnly vegeta.vegeta_saTest
1757993547707:exit
